[
  {
    "type": "trigger",
    "name": "Event Trigger",
    "description": "Subscribes to an external event (e.g., YouTrack 'attachment added'), emits the normalized event payload on output.event.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "entityType": { "type": "string", "enum": ["Issue", "Article"] },
        "eventType": { "type": "string", "enum": ["created", "updated", "removed"] },
        "updatedField": { "type": "string", "enum": ["summary", "description", "comment", "attachment", "state"] },
        "fieldUpdateType": { "type": "string", "enum": ["modified", "itemAdded", "itemRemoved"] }
      },
      "required": ["entityType", "eventType", "updatedField", "fieldUpdateType"]
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "event": {
          "type": "object",
          "description": "Normalized event payload from the source.",
          "additionalProperties": true
        }
      },
      "required": ["event"]
    }
  },
  {
    "type": "js",
    "name": "JavaScript Transform",
    "description": "Runs small, sandboxed JS to transform inputs. Returns whatever the function returns as output.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "A JS snippet. Receives {inputs, args, ctx}. Must return a JSON-serializable value."
        },
        "args": { "description": "Arbitrary JSON passed to the script as 'args'.", "nullable": true }
      },
      "required": ["code"]
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "output": { "description": "The value returned by the JS snippet." }
      },
      "required": ["output"]
    }
  },
  {
    "type": "action",
    "name": "External Action",
    "description": "Executes an external operation from an Actions Catalog (YouTrack, MCP, or App-to-App). Uses the catalog to validate inputs and shape outputs.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "actionId": { "type": "string", "description": "Key in the Actions Catalog." },
        "provider": {
          "type": "string",
          "enum": ["youtrack", "mcp", "a2a"],
          "description": "Where to dispatch the action."
        },
        "actionInput": {
          "type": "object",
          "description": "Corresponds to the action input schema",
          "additionalProperties": true
        }
      },
      "required": ["actionId", "provider", "actionInput"]
    },
    "outputSchema": {
      "type": "object",
      "description": "Corresponds the action output schema",
      "additionalProperties": true
    }
  },
  {
    "type": "llm.extract",
    "name": "LLM Extract (Structured)",
    "description": "Performs LLM-based information extraction. Optionally auto-converts PDFs to text. Returns the model’s parsed JSON under output.result and diagnostics under output.meta.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "instructions": { "type": "string", "description": "Task description for the model." },
        "outputJsonSchema": {
          "type": "object",
          "description": "JSON Schema describing the desired result object.",
          "additionalProperties": true
        },
        "mimeType": { "type": "string", "description": "MIME of the content if provided inline." },
        "base64content": {
          "type": "string",
          "description": "Base64-encoded content (e.g., file).",
          "contentEncoding": "base64"
        },
        "filename": { "type": "string", "description": "Original filename (helps with heuristics/OCR)." },
        "text": { "type": "string", "description": "Plain text to extract from (alternative to file)." }
      },
      "oneOf": [
        { "required": ["text"] },
        { "required": ["base64content"] }
      ],
      "required": ["instructions", "outputJsonSchema"]
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "result": {
          "type": "object",
          "description": "LLM-parsed object conforming to 'outputJsonSchema'.",
          "additionalProperties": true
        },
        "rawText": { "type": "string", "description": "Source text actually used by the extractor." },
        "meta": {
          "type": "object",
          "description": "Diagnostics (token counts, model, temperature, cost, validation errors).",
          "additionalProperties": true
        }
      },
      "required": ["result"]
    }
  },
  {
    "type": "llm.call",
    "name": "LLM Call",
    "description": "Single-turn LLM call that can optionally use tools (any cataloged action) and/or return structured JSON. Always returns text; if outputJsonSchema is provided, also returns a parsed result object.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "userPrompt": { "type": "string", "description": "User prompt for the LLM." },
        "tools": {
          "type": "array",
          "description": "Action IDs array",
          "items": {
            "type": "string"
          }
        },
        "outputJsonSchema": {
          "type": "object",
          "description": "If provided, the model must also return a JSON object matching this schema (emitted as output.result).",
          "additionalProperties": true
        }
      },
      "required": ["userPrompt"]
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "resultText": {
          "type": "string",
          "description": "The LLM’s natural-language answer."
        },
        "resultJson": {
          "type": "object",
          "description": "Parsed JSON conforming to outputJsonSchema (present only if outputJsonSchema was provided).",
          "additionalProperties": true
        }
      },
      "required": ["resultText"]
    }
  },
  {
    "type": "template",
    "name": "Template Render",
    "description": "Renders a text template using args (JS-style). Template string example: 'Some text: ${args.someValue}'. Emits the rendered string as output.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "template": { "type": "string", "description": "Template string." },
        "args": { "description": "Arbitrary JSON context available to the template.", "nullable": true }
      },
      "required": ["template"]
    },
    "outputSchema": {
      "type": "object",
      "properties": {
        "output": { "type": "string", "description": "Rendered template result." }
      },
      "required": ["output"]
    }
  }
]
