{
  "name": "PDF Mentions → Comment",
  "version": "poc-2",
  "nodes": [
    {
      "id": "attachment_added",
      "type": "trigger",
      "name": "Event Trigger",
      "description": "Receives YouTrack 'attachment added' event and exposes it as `event`.",
      "next": [
        {
          "nextNodeId": "pick_ids",
          "relationDescription": "Produces event consumed by Pick IDs."
        }
      ]
    },
    {
      "id": "pick_ids",
      "type": "js",
      "name": "Pick IDs",
      "description": "Extracts issueId and attachmentId from the trigger event.",
      "input": {
        "code": "return { issueId: args.issueId, attachmentId: args.attachmentId };",
        "args": "#attachment_added.output.event"
      },
      "next": [
        {
          "nextNodeId": "get_attachment",
          "relationDescription": "Provides IDs to YouTrack: GetAttachment."
        }
      ]
    },
    {
      "id": "get_attachment",
      "type": "action",
      "name": "YouTrack: GetAttachment",
      "description": "Downloads the attachment and returns blobRef, mimeType, filename.",
      "input": {
        "actionId": "get_attachment",
        "provider": "youtrack",
        "actionInput": {
          "issueId": "#pick_ids.output.issueId",
          "attachmentId": "#pick_ids.output.attachmentId"
        }
      },
      "next": [
        {
          "nextNodeId": "mentions_extract",
          "relationDescription": "Provides the downloaded file to LLM Extract Mentions."
        }
      ]
    },
    {
      "id": "mentions_extract",
      "type": "llm.extract",
      "name": "LLM Extract Mentions",
      "description": "Consumes file (auto PDF→text), extracts YouTrack issue keys into result.mentions.",
      "input": {
        "instructions": "Extract YouTrack issue keys like ABC-123. Return strict JSON per schema.",
        "outputJsonSchema": {
          "type": "object",
          "properties": { "mentions": { "type": "array", "items": { "type": "string" } } },
          "required": ["mentions"]
        },
        "mimeType": "#get_attachment.output.mimeType",
        "base64content": "#get_attachment.output.blobRef",
        "filename": "#get_attachment.output.filename"
      },
      "next": [
        {
          "nextNodeId": "has_mentions",
          "relationDescription": "Sends extracted mentions to Has Mentions?"
        }
      ]
    },
    {
      "id": "has_mentions",
      "type": "js",
      "name": "Has Mentions?",
      "description": "Normalizes to uppercase, dedupes, and sets boolean `ok`.",
      "input": {
        "code": "const m=(args.mentions||[]).map(s=>String(s).toUpperCase()); const uniq=[...new Set(m)]; return { ok: uniq.length>0, mentions: uniq, mentionsCsv: uniq.join(', ') };",
        "args": "#mentions_extract.output.result"
      },
      "next": [
        {
          "nextNodeId": "comment_text",
          "relationDescription": "Runs only when mentions exist.",
          "invokeCondition": "#this.output.ok == true"
        },
        {
          "nextNodeId": "exit",
          "relationDescription": "Stop when there are no mentions.",
          "invokeCondition": "#this.output.ok != true"
        }
      ]
    },
    {
      "id": "comment_text",
      "type": "template",
      "name": "Build Comment Text",
      "description": "Creates a comment like: ‘Found issue mentions in attachment: ...’.",
      "input": {
        "template": "Found issue mentions in attachment:\n ${args.mentionsCsv}",
        "args": "#has_mentions.output"
      },
      "next": [
        {
          "nextNodeId": "add_comment",
          "relationDescription": "Executes after comment text has been prepared."
        }
      ]
    },
    {
      "id": "add_comment",
      "type": "action",
      "name": "YouTrack: AddComment",
      "description": "Posts the generated comment to the issue.",
      "input": {
        "actionId": "add_comment",
        "provider": "youtrack",
        "actionInput": {
          "issueId": "#attachment_added.output.event.issueId",
          "text": "#comment_text.output"
        }
      }
    }
  ]
}
